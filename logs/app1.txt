Server is listening on localhost:3000.

*** Round 1 STARTED ***
Training started.
*** Round 2 STARTED ***
Training started.
*** Round 3 STARTED ***
Training started.
*** Round 4 STARTED ***
Training started.
*** Round 5 STARTED ***
Training started.
*** Round 6 STARTED ***
Training started.
*** Round 7 STARTED ***
Training started.
*** Round 8 STARTED ***
Training started.
*** Round 9 STARTED ***
Training started.
*** Round 10 STARTED ***
Training started.
*** Round 11 STARTED ***
Training started.
*** Round 12 STARTED ***
Training started.
*** Round 13 STARTED ***
Training started.
*** Round 14 STARTED ***
Training started.
*** Round 15 STARTED ***
Training started.
*** Round 16 STARTED ***
Training started.
*** Round 17 STARTED ***
Training started.
*** Round 18 STARTED ***
Training started.
*** Round 19 STARTED ***
Training started.
*** Round 20 STARTED ***
Training started.
*** Round 21 STARTED ***
Training started.
*** Round 22 STARTED ***
Training started.
*** Round 23 STARTED ***
Training started.
*** Round 24 STARTED ***
Training started.
*** Round 25 STARTED ***
Training started.
*** Round 26 STARTED ***
Training started.
*** Round 27 STARTED ***
Training started.
*** Round 28 STARTED ***
Training started.
*** Round 29 STARTED ***
Training started.
*** Round 30 STARTED ***
Training started.

node:internal/process/promises:391
    triggerUncaughtException(err, true /* fromPromise */);
    ^
AxiosError: Request failed with status code 500
    at settle (/home/cs/grad/sokhanka/Documents/DigitalTwin/express-application/node_modules/axios/dist/node/axios.cjs:2090:12)
    at IncomingMessage.handleStreamEnd (/home/cs/grad/sokhanka/Documents/DigitalTwin/express-application/node_modules/axios/dist/node/axios.cjs:3207:11)
    at IncomingMessage.emit (node:events:532:35)
    at IncomingMessage.emit (node:domain:488:12)
    at endReadableNT (node:internal/streams/readable:1696:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)
    at Axios.request (/home/cs/grad/sokhanka/Documents/DigitalTwin/express-application/node_modules/axios/dist/node/axios.cjs:4317:41)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async startRound (/home/cs/grad/sokhanka/Documents/DigitalTwin/express-application/app1.js:134:9)
    at async Timeout.callAggregator [as _onTimeout] (/home/cs/grad/sokhanka/Documents/DigitalTwin/express-application/app1.js:118:5) {
  code: 'ERR_BAD_RESPONSE',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] [FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': undefined,
      'User-Agent': 'axios/1.11.0',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    method: 'get',
    url: 'http://localhost:8080/losses/',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *1> ClientRequest {
    _events: [Object: null prototype] {
      abort: [Function (anonymous)],
      aborted: [Function (anonymous)],
      connect: [Function (anonymous)],
      error: [Function (anonymous)],
      socket: [Function (anonymous)],
      timeout: [Function (anonymous)],
      finish: [Function: requestOnFinish]
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: 0,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: false,
    _header: 'GET /losses/ HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'User-Agent: axios/1.11.0\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: localhost:8080\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop],
    agent: Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] {
        keepAlive: true,
        scheduling: 'lifo',
        timeout: 5000,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {
        'localhost:8080:': [
          Socket {
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'localhost',
            _closeAfterHandlingError: false,
            _events: [Object],
            _readableState: [ReadableState],
            _writableState: [WritableState],
            allowHalfOpen: false,
            _maxListeners: undefined,
            _eventsCount: 7,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: null,
            _server: null,
            timeout: 5000,
            parser: null,
            _httpMessage: [Circular *1],
            [Symbol(async_id_symbol)]: 34664,
            [Symbol(kHandle)]: [TCP],
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: [Timeout],
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(shapeMode)]: true,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: true,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 60,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0
          }
        ]
      },
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'GET',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/losses/',
    _ended: true,
    res: IncomingMessage {
      _events: {
        close: undefined,
        error: [Function: handleStreamError],
        data: [Function: handleStreamData],
        end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
        readable: undefined,
        finish: undefined,
        aborted: [Function: handlerStreamAborted]
      },
      _readableState: ReadableState {
        highWaterMark: 65536,
        buffer: [],
        bufferIndex: 0,
        length: 0,
        pipes: [],
        awaitDrainWriters: null,
        [Symbol(kState)]: 194779004
      },
      _maxListeners: undefined,
      socket: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _events: {
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          error: [Function: socketErrorListener],
          prefinish: undefined,
          finish: [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          drain: undefined,
          data: undefined,
          end: [Function: onReadableStreamEnd],
          readable: undefined,
          connect: undefined,
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove]
        },
        _readableState: ReadableState {
          highWaterMark: 65536,
          buffer: [],
          bufferIndex: 0,
          length: 0,
          pipes: [],
          awaitDrainWriters: null,
          [Symbol(kState)]: 60303620
        },
        _writableState: WritableState {
          highWaterMark: 65536,
          length: 0,
          corked: 0,
          onwrite: [Function: bound onwrite],
          writelen: 0,
          bufferedIndex: 0,
          pendingcb: 1,
          [Symbol(kState)]: 1091310852,
          [Symbol(kBufferedValue)]: null,
          [Symbol(kWriteCbValue)]: null
        },
        allowHalfOpen: false,
        _maxListeners: undefined,
        _eventsCount: 7,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        timeout: 5000,
        parser: null,
        _httpMessage: [Circular *1],
        [Symbol(async_id_symbol)]: 34664,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: <ref *3> Timeout {
          _idleTimeout: 5000,
          _idlePrev: TimersList {
            _idleNext: [Circular *3],
            _idlePrev: [Circular *3],
            expiry: 36610373,
            id: -9007199254733437,
            msecs: 5000,
            priorityQueuePosition: 5
          },
          _idleNext: TimersList {
            _idleNext: [Circular *3],
            _idlePrev: [Circular *3],
            expiry: 36610373,
            id: -9007199254733437,
            msecs: 5000,
            priorityQueuePosition: 5
          },
          _idleStart: 36605404,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 34663,
          [Symbol(triggerId)]: 0
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Server',
        'Werkzeug/3.1.3 Python/3.10.16',
        'Date',
        'Thu, 31 Jul 2025 04:43:27 GMT',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '13793',
        'Connection',
        'close'
      ],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 500,
      statusMessage: 'INTERNAL SERVER ERROR',
      client: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _events: {
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          error: [Function: socketErrorListener],
          prefinish: undefined,
          finish: [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          drain: undefined,
          data: undefined,
          end: [Function: onReadableStreamEnd],
          readable: undefined,
          connect: undefined,
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove]
        },
        _readableState: ReadableState {
          highWaterMark: 65536,
          buffer: [],
          bufferIndex: 0,
          length: 0,
          pipes: [],
          awaitDrainWriters: null,
          [Symbol(kState)]: 60303620
        },
        _writableState: WritableState {
          highWaterMark: 65536,
          length: 0,
          corked: 0,
          onwrite: [Function: bound onwrite],
          writelen: 0,
          bufferedIndex: 0,
          pendingcb: 1,
          [Symbol(kState)]: 1091310852,
          [Symbol(kBufferedValue)]: null,
          [Symbol(kWriteCbValue)]: null
        },
        allowHalfOpen: false,
        _maxListeners: undefined,
        _eventsCount: 7,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        timeout: 5000,
        parser: null,
        _httpMessage: [Circular *1],
        [Symbol(async_id_symbol)]: 34664,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: <ref *3> Timeout {
          _idleTimeout: 5000,
          _idlePrev: TimersList {
            _idleNext: [Circular *3],
            _idlePrev: [Circular *3],
            expiry: 36610373,
            id: -9007199254733437,
            msecs: 5000,
            priorityQueuePosition: 5
          },
          _idleNext: TimersList {
            _idleNext: [Circular *3],
            _idlePrev: [Circular *3],
            expiry: 36610373,
            id: -9007199254733437,
            msecs: 5000,
            priorityQueuePosition: 5
          },
          _idleStart: 36605404,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 34663,
          [Symbol(triggerId)]: 0
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _consuming: false,
      _dumped: false,
      req: [Circular *1],
      _eventsCount: 4,
      responseUrl: 'http://localhost:8080/losses/',
      redirects: [],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        server: 'Werkzeug/3.1.3 Python/3.10.16',
        date: 'Thu, 31 Jul 2025 04:43:27 GMT',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '13793',
        connection: 'close'
      },
      [Symbol(kHeadersCount)]: 10,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    aborted: false,
    timeoutCb: [Function: emitRequestTimeout],
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'localhost',
    protocol: 'http:',
    _redirectable: Writable {
      _events: {
        close: undefined,
        error: [Function: handleRequestError],
        prefinish: undefined,
        finish: undefined,
        drain: undefined,
        response: [Function: handleResponse],
        socket: [Function: handleRequestSocket]
      },
      _writableState: WritableState {
        highWaterMark: 65536,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite],
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 17580812,
        [Symbol(kBufferedValue)]: null
      },
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'http:',
        path: '/losses/',
        method: 'GET',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'User-Agent': 'axios/1.11.0',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: [Function: dispatchBeforeRedirect],
        beforeRedirects: { proxy: [Function: beforeRedirect] },
        hostname: 'localhost',
        port: '8080',
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: [Function: connectionListener],
            METHODS: [Array],
            STATUS_CODES: [Object],
            Agent: [Function],
            ClientRequest: [Function: ClientRequest],
            IncomingMessage: [Function: IncomingMessage],
            OutgoingMessage: [Function: OutgoingMessage],
            Server: [Function: Server],
            ServerResponse: [Function: ServerResponse],
            createServer: [Function: createServer],
            validateHeaderName: [Function],
            validateHeaderValue: [Function],
            get: [Function: get],
            request: [Function: request],
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: [Function: Agent],
            globalAgent: [Agent],
            Server: [Function: Server],
            createServer: [Function: createServer],
            get: [Function: get],
            request: [Function: request]
          }
        },
        pathname: '/losses/'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 0,
      _requestBodyBuffers: [],
      _eventsCount: 3,
      _onNativeResponse: [Function (anonymous)],
      _currentRequest: [Circular *1],
      _currentUrl: 'http://localhost:8080/losses/',
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kChunkedBuffer)]: [],
    [Symbol(kChunkedLength)]: 0,
    [Symbol(kSocket)]: <ref *2> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _events: {
        close: [ [Function: onClose], [Function: socketCloseListener] ],
        error: [Function: socketErrorListener],
        prefinish: undefined,
        finish: [Function: bound onceWrapper] {
          listener: [Function (anonymous)]
        },
        drain: undefined,
        data: undefined,
        end: [Function: onReadableStreamEnd],
        readable: undefined,
        connect: undefined,
        free: [Function: onFree],
        timeout: [Function: onTimeout],
        agentRemove: [Function: onRemove]
      },
      _readableState: ReadableState {
        highWaterMark: 65536,
        buffer: [],
        bufferIndex: 0,
        length: 0,
        pipes: [],
        awaitDrainWriters: null,
        [Symbol(kState)]: 60303620
      },
      _writableState: WritableState {
        highWaterMark: 65536,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite],
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 1,
        [Symbol(kState)]: 1091310852,
        [Symbol(kBufferedValue)]: null,
        [Symbol(kWriteCbValue)]: null
      },
      allowHalfOpen: false,
      _maxListeners: undefined,
      _eventsCount: 7,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      timeout: 5000,
      parser: null,
      _httpMessage: [Circular *1],
      [Symbol(async_id_symbol)]: 34664,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        [Symbol(owner_symbol)]: [Circular *2]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: <ref *3> Timeout {
        _idleTimeout: 5000,
        _idlePrev: TimersList {
          _idleNext: [Circular *3],
          _idlePrev: [Circular *3],
          expiry: 36610373,
          id: -9007199254733437,
          msecs: 5000,
          priorityQueuePosition: 5
        },
        _idleNext: TimersList {
          _idleNext: [Circular *3],
          _idlePrev: [Circular *3],
          expiry: 36610373,
          id: -9007199254733437,
          msecs: 5000,
          priorityQueuePosition: 5
        },
        _idleStart: 36605404,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 34663,
        [Symbol(triggerId)]: 0
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 60,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*' ],
      'user-agent': [ 'User-Agent', 'axios/1.11.0' ],
      'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
      host: [ 'Host', 'localhost:8080' ]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 65536,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  response: {
    status: 500,
    statusText: 'INTERNAL SERVER ERROR',
    headers: Object [AxiosHeaders] {
      server: 'Werkzeug/3.1.3 Python/3.10.16',
      date: 'Thu, 31 Jul 2025 04:43:27 GMT',
      'content-type': 'text/html; charset=utf-8',
      'content-length': '13793',
      connection: 'close'
    },
    config: {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: [ 'xhr', 'http', 'fetch' ],
      transformRequest: [ [Function: transformRequest] ],
      transformResponse: [ [Function: transformResponse] ],
      timeout: 0,
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: [Function: FormData] [FormData] {
          LINE_BREAK: '\r\n',
          DEFAULT_CONTENT_TYPE: 'application/octet-stream'
        },
        Blob: [class Blob]
      },
      validateStatus: [Function: validateStatus],
      headers: Object [AxiosHeaders] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': undefined,
        'User-Agent': 'axios/1.11.0',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      method: 'get',
      url: 'http://localhost:8080/losses/',
      allowAbsoluteUrls: true,
      data: undefined
    },
    request: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)],
        finish: [Function: requestOnFinish]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      _header: 'GET /losses/ HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'User-Agent: axios/1.11.0\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:8080\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] {
          keepAlive: true,
          scheduling: 'lifo',
          timeout: 5000,
          noDelay: true,
          path: null
        },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] { 'localhost:8080:': [ [Socket] ] },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/losses/',
      _ended: true,
      res: IncomingMessage {
        _events: {
          close: undefined,
          error: [Function: handleStreamError],
          data: [Function: handleStreamData],
          end: [ [Function: responseOnEnd], [Function: handleStreamEnd] ],
          readable: undefined,
          finish: undefined,
          aborted: [Function: handlerStreamAborted]
        },
        _readableState: ReadableState {
          highWaterMark: 65536,
          buffer: [],
          bufferIndex: 0,
          length: 0,
          pipes: [],
          awaitDrainWriters: null,
          [Symbol(kState)]: 194779004
        },
        _maxListeners: undefined,
        socket: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _events: {
            close: [Array],
            error: [Function: socketErrorListener],
            prefinish: undefined,
            finish: [Function],
            drain: undefined,
            data: undefined,
            end: [Function: onReadableStreamEnd],
            readable: undefined,
            connect: undefined,
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove]
          },
          _readableState: ReadableState {
            highWaterMark: 65536,
            buffer: [],
            bufferIndex: 0,
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 60303620
          },
          _writableState: WritableState {
            highWaterMark: 65536,
            length: 0,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 0,
            bufferedIndex: 0,
            pendingcb: 1,
            [Symbol(kState)]: 1091310852,
            [Symbol(kBufferedValue)]: null,
            [Symbol(kWriteCbValue)]: null
          },
          allowHalfOpen: false,
          _maxListeners: undefined,
          _eventsCount: 7,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          timeout: 5000,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(async_id_symbol)]: 34664,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: <ref *3> Timeout {
            _idleTimeout: 5000,
            _idlePrev: [TimersList],
            _idleNext: [TimersList],
            _idleStart: 36605404,
            _onTimeout: [Function: bound ],
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 34663,
            [Symbol(triggerId)]: 0
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(shapeMode)]: true,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        rawHeaders: [
          'Server',
          'Werkzeug/3.1.3 Python/3.10.16',
          'Date',
          'Thu, 31 Jul 2025 04:43:27 GMT',
          'Content-Type',
          'text/html; charset=utf-8',
          'Content-Length',
          '13793',
          'Connection',
          'close'
        ],
        rawTrailers: [],
        joinDuplicateHeaders: undefined,
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 500,
        statusMessage: 'INTERNAL SERVER ERROR',
        client: <ref *2> Socket {
          connecting: false,
          _hadError: false,
          _parent: null,
          _host: 'localhost',
          _closeAfterHandlingError: false,
          _events: {
            close: [Array],
            error: [Function: socketErrorListener],
            prefinish: undefined,
            finish: [Function],
            drain: undefined,
            data: undefined,
            end: [Function: onReadableStreamEnd],
            readable: undefined,
            connect: undefined,
            free: [Function: onFree],
            timeout: [Function: onTimeout],
            agentRemove: [Function: onRemove]
          },
          _readableState: ReadableState {
            highWaterMark: 65536,
            buffer: [],
            bufferIndex: 0,
            length: 0,
            pipes: [],
            awaitDrainWriters: null,
            [Symbol(kState)]: 60303620
          },
          _writableState: WritableState {
            highWaterMark: 65536,
            length: 0,
            corked: 0,
            onwrite: [Function: bound onwrite],
            writelen: 0,
            bufferedIndex: 0,
            pendingcb: 1,
            [Symbol(kState)]: 1091310852,
            [Symbol(kBufferedValue)]: null,
            [Symbol(kWriteCbValue)]: null
          },
          allowHalfOpen: false,
          _maxListeners: undefined,
          _eventsCount: 7,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: null,
          _server: null,
          timeout: 5000,
          parser: null,
          _httpMessage: [Circular *1],
          [Symbol(async_id_symbol)]: 34664,
          [Symbol(kHandle)]: TCP {
            reading: true,
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *2]
          },
          [Symbol(lastWriteQueueSize)]: 0,
          [Symbol(timeout)]: <ref *3> Timeout {
            _idleTimeout: 5000,
            _idlePrev: [TimersList],
            _idleNext: [TimersList],
            _idleStart: 36605404,
            _onTimeout: [Function: bound ],
            _timerArgs: undefined,
            _repeat: null,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 34663,
            [Symbol(triggerId)]: 0
          },
          [Symbol(kBuffer)]: null,
          [Symbol(kBufferCb)]: null,
          [Symbol(kBufferGen)]: null,
          [Symbol(shapeMode)]: true,
          [Symbol(kCapture)]: false,
          [Symbol(kSetNoDelay)]: true,
          [Symbol(kSetKeepAlive)]: true,
          [Symbol(kSetKeepAliveInitialDelay)]: 60,
          [Symbol(kBytesRead)]: 0,
          [Symbol(kBytesWritten)]: 0
        },
        _consuming: false,
        _dumped: false,
        req: [Circular *1],
        _eventsCount: 4,
        responseUrl: 'http://localhost:8080/losses/',
        redirects: [],
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: {
          server: 'Werkzeug/3.1.3 Python/3.10.16',
          date: 'Thu, 31 Jul 2025 04:43:27 GMT',
          'content-type': 'text/html; charset=utf-8',
          'content-length': '13793',
          connection: 'close'
        },
        [Symbol(kHeadersCount)]: 10,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      aborted: false,
      timeoutCb: [Function: emitRequestTimeout],
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: Writable {
        _events: {
          close: undefined,
          error: [Function: handleRequestError],
          prefinish: undefined,
          finish: undefined,
          drain: undefined,
          response: [Function: handleResponse],
          socket: [Function: handleRequestSocket]
        },
        _writableState: WritableState {
          highWaterMark: 65536,
          length: 0,
          corked: 0,
          onwrite: [Function: bound onwrite],
          writelen: 0,
          bufferedIndex: 0,
          pendingcb: 0,
          [Symbol(kState)]: 17580812,
          [Symbol(kBufferedValue)]: null
        },
        _maxListeners: undefined,
        _options: {
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'http:',
          path: '/losses/',
          method: 'GET',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'User-Agent': 'axios/1.11.0',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: [Function: dispatchBeforeRedirect],
          beforeRedirects: { proxy: [Function: beforeRedirect] },
          hostname: 'localhost',
          port: '8080',
          agent: undefined,
          nativeProtocols: { 'http:': [Object], 'https:': [Object] },
          pathname: '/losses/'
        },
        _ended: true,
        _ending: true,
        _redirectCount: 0,
        _redirects: [],
        _requestBodyLength: 0,
        _requestBodyBuffers: [],
        _eventsCount: 3,
        _onNativeResponse: [Function (anonymous)],
        _currentRequest: [Circular *1],
        _currentUrl: 'http://localhost:8080/losses/',
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false
      },
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kChunkedBuffer)]: [],
      [Symbol(kChunkedLength)]: 0,
      [Symbol(kSocket)]: <ref *2> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _events: {
          close: [ [Function: onClose], [Function: socketCloseListener] ],
          error: [Function: socketErrorListener],
          prefinish: undefined,
          finish: [Function: bound onceWrapper] {
            listener: [Function (anonymous)]
          },
          drain: undefined,
          data: undefined,
          end: [Function: onReadableStreamEnd],
          readable: undefined,
          connect: undefined,
          free: [Function: onFree],
          timeout: [Function: onTimeout],
          agentRemove: [Function: onRemove]
        },
        _readableState: ReadableState {
          highWaterMark: 65536,
          buffer: [],
          bufferIndex: 0,
          length: 0,
          pipes: [],
          awaitDrainWriters: null,
          [Symbol(kState)]: 60303620
        },
        _writableState: WritableState {
          highWaterMark: 65536,
          length: 0,
          corked: 0,
          onwrite: [Function: bound onwrite],
          writelen: 0,
          bufferedIndex: 0,
          pendingcb: 1,
          [Symbol(kState)]: 1091310852,
          [Symbol(kBufferedValue)]: null,
          [Symbol(kWriteCbValue)]: null
        },
        allowHalfOpen: false,
        _maxListeners: undefined,
        _eventsCount: 7,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        timeout: 5000,
        parser: null,
        _httpMessage: [Circular *1],
        [Symbol(async_id_symbol)]: 34664,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *2]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: <ref *3> Timeout {
          _idleTimeout: 5000,
          _idlePrev: TimersList {
            _idleNext: [Circular *3],
            _idlePrev: [Circular *3],
            expiry: 36610373,
            id: -9007199254733437,
            msecs: 5000,
            priorityQueuePosition: 5
          },
          _idleNext: TimersList {
            _idleNext: [Circular *3],
            _idlePrev: [Circular *3],
            expiry: 36610373,
            id: -9007199254733437,
            msecs: 5000,
            priorityQueuePosition: 5
          },
          _idleStart: 36605404,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 34663,
          [Symbol(triggerId)]: 0
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 60,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'user-agent': [ 'User-Agent', 'axios/1.11.0' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'localhost:8080' ]
      },
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 65536,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    data: '<!doctype html>\n' +
      '<html lang=en>\n' +
      '  <head>\n' +
      '    <title>NameError: name &#39;wwww&#39; is not defined\n' +
      ' // Werkzeug Debugger</title>\n' +
      '    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">\n' +
      '    <link rel="shortcut icon"\n' +
      '        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n' +
      '    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n' +
      '    <script>\n' +
      '      var CONSOLE_MODE = false,\n' +
      '          EVALEX = true,\n' +
      '          EVALEX_TRUSTED = false,\n' +
      '          SECRET = "1g4lRS2Z7F2mA0vBm3lS";\n' +
      '    </script>\n' +
      '  </head>\n' +
      '  <body style="background-color: #fff">\n' +
      '    <div class="debugger">\n' +
      '<h1>NameError</h1>\n' +
      '<div class="detail">\n' +
      '  <p class="errormsg">NameError: name &#39;wwww&#39; is not defined\n' +
      '</p>\n' +
      '</div>\n' +
      '<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n' +
      '<div class="traceback">\n' +
      '  <h3></h3>\n' +
      '  <ul><li><div class="frame" id="frame-137703165120624">\n' +
      '  <h4>File <cite class="filename">"/home/cs/grad/sokhanka/miniconda3/envs/data-science/lib/python3.10/site-packages/flask/app.py"</cite>,\n' +
      '      line <em class="line">1536</em>,\n' +
      '      in <code class="function">__call__</code></h4>\n' +
      '  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>\n' +
      '<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>\n' +
      '<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n' +
      '<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>\n' +
      '<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>\n' +
      '<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>\n' +
      '</div>\n' +
      '\n' +
      '<li><div class="frame" id="frame-137703165123200">\n' +
      '  <h4>File <cite class="filename">"/home/cs/grad/sokhanka/miniconda3/envs/data-science/lib/python3.10/site-packages/flask/app.py"</cite>,\n' +
      '      line <em class="line">1514</em>,\n' +
      '      in <code class="function">wsgi_app</code></h4>\n' +
      '  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>\n' +
      '<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n' +
      '<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n' +
      '<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n' +
      '<pre class="line before"><span class="ws">                </span>error = e</pre>\n' +
      '<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n' +
      '<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n' +
      '<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>\n' +
      '<pre class="line after"><span class="ws">                </span>raise</pre>\n' +
      '<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>\n' +
      '<pre class="line after"><span class="ws">        </span>finally:</pre></div>\n' +
      '</div>\n' +
      '\n' +
      '<li><div class="frame" id="frame-137703165118272">\n' +
      '  <h4>File <cite class="filename">"/home/cs/grad/sokhanka/miniconda3/envs/data-science/lib/python3.10/site-packages/flask/app.py"</cite>,\n' +
      '      line <em class="line">1511</em>,\n' +
      '      in <code class="function">wsgi_app</code></h4>\n' +
      '  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>\n' +
      '<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>\n' +
      '<pre class="line before"><span class="ws">        </span>try:</pre>\n' +
      '<pre class="line before"><span class="ws">            </span>try:</pre>\n' +
      '<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n' +
      '<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n' +
      '<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n' +
      '<pre class="line after"><span class="ws">                </span>error = e</pre>\n' +
      '<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n' +
      '<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n' +
      '<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>\n' +
      '</div>\n' +
      '\n' +
      '<li><div class="frame" id="frame-137703165122976">\n' +
      '  <h4>File <cite class="filename">"/home/cs/grad/sokhanka/miniconda3/envs/data-science/lib/python3.10/site-packages/flask/app.py"</cite>,\n' +
      '      line <em class="line">919</em>,\n' +
      '      in <code class="function">full_dispatch_request</code></h4>\n' +
      '  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>\n' +
      '<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n' +
      '<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n' +
      '<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n' +
      '<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>\n' +
      '<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n' +
      '<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n' +
      '<pre class="line after"><span class="ws"></span> </pre>\n' +
      '<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>\n' +
      '<pre class="line after"><span class="ws">        </span>self,</pre>\n' +
      '<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>\n' +
      '</div>\n' +
      '\n' +
      '<li><div class="frame" id="frame-137703165117824">\n' +
      '  <h4>File <cite class="filename">"/home/cs/grad/sokhanka/miniconda3/envs/data-science/lib/python3.10/site-packages/flask/app.py"</cite>,\n' +
      '      line <em class="line">917</em>,\n' +
      '      in <code class="function">full_dispatch_request</code></h4>\n' +
      '  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>\n' +
      '<pre class="line before"><span class="ws">        </span>try:</pre>\n' +
      '<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>\n' +
      '<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n' +
      '<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n' +
      '<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n' +
      '<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>\n' +
      '<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n' +
      '<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n' +
      '<pre class="line after"><span class="ws"></span> </pre>\n' +
      '<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>\n' +
      '</div>\n' +
      '\n' +
      '<li><div class="frame" id="frame-137703165129808">\n' +
      '  <h4>File <cite class="filename">"/home/cs/grad/sokhanka/miniconda3/envs/data-science/lib/python3.10/site-packages/flask/app.py"</cite>,\n' +
      '      line <em class="line">902</em>,\n' +
      '      in <code class="function">dispatch_request</code></h4>\n' +
      '  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>\n' +
      '<pre class="line before"><span class="ws">        </span>):</pre>\n' +
      '<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>\n' +
      '<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>\n' +
      '<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>\n' +
      '<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>\n' +
      '<pre class="line after"><span class="ws"></span> </pre>\n' +
      '<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n' +
      '<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>\n' +
      '<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n' +
      '<pre class="line after"><span class="ws">        </span>error handling.</pre></div>\n' +
      '</div>\n' +
      '\n' +
      '<li><div class="frame" id="frame-137703165127232">\n' +
      '  <h4>File <cite class="filename">"/home/cs/grad/sokhanka/Documents/DigitalTwin/nodes/aggregator.py"</cite>,\n' +
      '      line <em class="line">95</em>,\n' +
      '      in <code class="function">save_losses</code></h4>\n' +
      '  <div class="source "><pre class="line before"><span class="ws"></span>aggregator = Aggregator()</pre>\n' +
      '<pre class="line before"><span class="ws"></span> </pre>\n' +
      '<pre class="line before"><span class="ws"></span> </pre>\n' +
      '<pre class="line before"><span class="ws"></span>@app.route(&#34;/losses/&#34;)</pre>\n' +
      '<pre class="line before"><span class="ws"></span>def save_losses():</pre>\n' +
      '<pre class="line current"><span class="ws">    </span>file = open(aggregator.losses_file, &#34;w&#34;)</pre>\n' +
      '<pre class="line after"><span class="ws">    </span>file.write(json.dumps(aggregator.losses))</pre>\n' +
      '<pre class="line after"><span class="ws">    </span>return &#34;Done&#34;</pre>\n' +
      '<pre class="line after"><span class="ws"></span> </pre>\n' +
      '<pre class="line after"><span class="ws"></span> </pre>\n' +
      '<pre class="line after"><span class="ws"></span>@app.route(&#34;/aggregate/&#34;, methods=[&#39;POST&#39;])</pre></div>\n' +
      '</div>\n' +
      '</ul>\n' +
      '  <blockquote>NameError: name &#39;wwww&#39; is not defined\n' +
      '</blockquote>\n' +
      '</div>\n' +
      '\n' +
      '<div class="plain">\n' +
      '    <p>\n' +
      '      This is the Copy/Paste friendly version of the traceback.\n' +
      '    </p>\n' +
      '    <textarea cols="50" rows="10" name="code" readonly>T'... 3793 more characters
  },
  status: 500
}

Node.js v22.4.1
